//
//  BriefViewController.m
//  Miner
//
//  Created by zhihua.qian on 15-1-5.
//  Copyright (c) 2015年 jim kaden. All rights reserved.
//

#import "BriefViewController.h"
//#import "GameObject.h"
#import "BattleData.h"
#import "BriefTitleTableViewCell.h"
#import "BriefPropsTableViewCell.h"
#import "BriefTextTableViewCell.h"
#import "BriefCircleLabel.h"


#import "Item.h"
#import "Equipment.h"

#define Show_Time   3

@interface BriefViewController ()
@property (strong, nonatomic) IBOutlet UIView *parentView;
@property (strong, nonatomic) BriefCircleLabel *theBriefCircleLabel;
@property (nonatomic, assign) BOOL isShowing; //标志briefViewController是否呈现,TRUE:呈现 FALSE:未呈现
@property (nonatomic, strong) NSMutableArray* briefDataQueue;
@property (nonatomic, strong) NSMutableArray* briefCellsArr;

// 测试数据,正式发布将移除 +
@property (nonatomic, strong) NSMutableArray* theItems;
@property (nonatomic, strong) NSMutableArray* theEquips;
@property (nonatomic, strong) NSMutableArray* theBoxs;
@property (nonatomic, strong) NSMutableArray* theAutoSells;
// 测试数据,正式发布将移除 -


@property (strong, nonatomic) NSTimer* showTimer;
@end

@implementation BriefViewController


#define Collection_Section_Num      2

-(void)setTransParentImage; {
    if (nil!=self.parentView) {
        UIGraphicsBeginImageContext(self.parentView.bounds.size);
        [self.parentView.layer renderInContext:UIGraphicsGetCurrentContext()];
        UIImage *viewImage = UIGraphicsGetImageFromCurrentImageContext();
        UIGraphicsEndImageContext();
        [self.view setBackgroundColor:[UIColor colorWithPatternImage:viewImage]] ;
    }
}


-(id)init; {
    if (self=[super init]) {
        // 设置模态对话框透明属性
        // 此属性目前只支持到iOS8.0 为了保持兼容iOS 6.0 采用如下算法 请参考方法 setTransParentImage

        // 此处先屏蔽
//        self.modalPresentationStyle = UIModalPresentationOverFullScreen ;
//        self.parentView = nil;

        self.isShowing = FALSE ;
        self.briefDataQueue = [[NSMutableArray alloc] init];
        // 初始化briefCellsArr
        self.briefCellsArr = [[NSMutableArray alloc] init];
        BriefTitleTableViewCell *briefTitleTableViewCell = [[[NSBundle mainBundle] loadNibNamed:NSStringFromClass([BriefTitleTableViewCell class]) owner:self options:nil] objectAtIndex:0];
        
        BriefPropsTableViewCell *briefPropsTableViewCell = [[[NSBundle mainBundle] loadNibNamed:NSStringFromClass([BriefPropsTableViewCell class]) owner:self options:nil] objectAtIndex:0]; ;
        
        BriefTextTableViewCell *briefTextTableViewCell = [[[NSBundle mainBundle] loadNibNamed:NSStringFromClass([BriefTextTableViewCell class]) owner:self options:nil] objectAtIndex:0]; ;
        
        UITextView *briefTextViewCell = [[UITextView alloc] init] ;
        
        briefTextViewCell.text = @"This is a test" ;
        
        [self.briefCellsArr addObject:briefTitleTableViewCell] ;
        [self.briefCellsArr addObject:briefPropsTableViewCell] ;
        [self.briefCellsArr addObject:briefTextTableViewCell] ;
        // 初始化战斗简报内容为零
        self.seconds        = 0;
        self.battleCount    = 0;
        self.battleWins     = 0;
        self.battleLost     = 0;
        self.battleMine     = 0;
        self.exp            = 0;
        self.money          = 0;
        self.items          = nil;
        self.equips         = nil;
        self.boxs           = nil;
        self.autoSells      = nil;
        
        // 初始化测试数据 +
        [self prepareTestPackage];
        // 初始化测试数据 -
  
//        label.transform = CGAffineTransformMakeRotation(45)
//        self.briefMiningResult.transform
//        self.view.layer.transform
//        CGAffineTransform transform= CGAffineTransformMakeRotation(M_PI*0.38);
//        self.briefMiningResult.layer.transform = CGAffineTransformMakeRotation(M_PI*0.38);
/*
        UIImageView *image = [[UIImageView alloc]init];
        image.frame = CGRectMake(50, 50, 200, 200);
        image.image = [UIImage imageNamed:@"result_helmet.png"];
        [self.view addSubview:image];
        CGAffineTransform transform1= CGAffineTransformMakeRotation(M_PI*0.38);
        image.transform = transform1;//旋转
*/
/*
        UILabel *image = [[UILabel alloc]init];
        image.frame = CGRectMake(100, 100, 100, 20);
        image.text = @"This is a test";
        [self.view addSubview:image];
        CGAffineTransform transform1= CGAffineTransformMakeRotation(M_PI*0.38);
        image.transform = transform1;//旋转
        
        UILabel *image1 = [[UILabel alloc]init];
        image1.frame = CGRectMake(100, 100, 100, 20);
        image1.text = @"This is a test";
        [self.view addSubview:image1];
*/
    }
    return self ;
}

-(void)prepareTestPackage; {
    self.theItems = [[NSMutableArray alloc] init] ;
    for(int i=1; i<=23; i++) {
        Item* aItem=[[Item alloc] init];
        aItem.itemIId = [NSNumber numberWithInt:(i-1)%5];
        aItem.itemName = [NSString stringWithFormat:@"key_itemname%03d", 100+i%5];
        aItem.itemIcon = [NSString stringWithFormat:@"icon_item%03d", 100+i%5];
        aItem.itemDesc = [NSString stringWithFormat:@"key_itemname%03d", 100+i%5];
        aItem.itemType = [NSNumber numberWithInt:3];
        aItem.itemCount= [NSNumber numberWithInt:i];
        
        [self.theItems addObject:aItem];
    }
    
    self.theEquips = [[NSMutableArray alloc] init] ;
    for(int i=1; i<=127; i++) {
        Equipment* aEquipment=[[Equipment alloc] init];
        aEquipment.equipId = [NSNumber numberWithInt:i-1];
        aEquipment.equipName = [NSString stringWithFormat:@"icon_equipname60%03d", i%5+1];
        aEquipment.equipIcon = [NSString stringWithFormat:@"icon_equip601%02d.jpg", i%5+1];
        aEquipment.equipDesc = [NSString stringWithFormat:@"icon_equipname6060%03d", i%5];
        aEquipment.equipSlot = [NSNumber numberWithInt:3];
        aEquipment.equipStar = [NSNumber numberWithInt:i%6];
        
        [self.theEquips addObject:aEquipment];
    }
    
    self.theAutoSells = [[NSMutableArray alloc] init];
    [self.theAutoSells addObject:[NSNumber numberWithInt:1]]; // 白
    [self.theAutoSells addObject:[NSNumber numberWithInt:2]]; // 蓝
    [self.theAutoSells addObject:[NSNumber numberWithInt:0]]; // 绿
    [self.theAutoSells addObject:[NSNumber numberWithInt:4]]; // 红
    [self.theAutoSells addObject:[NSNumber numberWithInt:5]]; // 紫
    
}

-(BOOL)isPresented; {
    return self.isShowing ;
}

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view from its nib.
    self.contentView.dataSource = self;
    self.contentView.delegate = self;
    
    if (nil==self.theBriefCircleLabel) {
        self.theBriefCircleLabel = [[BriefCircleLabel alloc] init];
        self.theBriefCircleLabel.frame = CGRectMake(23,35,272,41);
//        [self.theBriefCircleLabel setBackgroundColor:[UIColor blackColor]];
        [self.theBriefCircleLabel setBackgroundColor:[UIColor clearColor]];
        [self.theBriefCircleLabel setAutoresizingMask:0x3F];
        [self.view addSubview:self.theBriefCircleLabel];
    }

}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

/*
 #pragma mark - Navigation
 
 // In a storyboard-based application, you will often want to do a little preparation before navigation
 - (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
 // Get the new view controller using [segue destinationViewController].
 // Pass the selected object to the new view controller.
 }
 */

-(NSArray*)accumulatingItems:(NSArray*)inItems; {
    // 此处有个bug，先暂时用笨方法解决，不知道有没有内存泄漏
    NSMutableArray* result=[[NSMutableArray alloc] init];
    for(int i=0; i<[inItems count]; i++) {
        Item* aItem=[[Item alloc] init];
        Item* bItem = [inItems objectAtIndex:i] ;

        aItem.itemIId = bItem.itemIId;
        aItem.itemName = bItem.itemName;
        aItem.itemIcon = bItem.itemIcon;
        aItem.itemDesc = bItem.itemDesc;
        aItem.itemType = bItem.itemType;
        aItem.itemCount= bItem.itemCount;

        [result addObject:aItem];
    }
    
    if (nil!=result) {
        for(int i=0; i<[result count]; i++) {
            // 取i元素
            Item* iItem = [result objectAtIndex:i];
            for (int j=i+1; j<[result count];) {
                // 取j元素
                Item* jItem = [result objectAtIndex:j];
                // 比较i元素j元素 id相等
                if ([[iItem itemIId] isEqual:[jItem itemIId]]) {
                    // 累计count
                    iItem.itemCount = [NSNumber numberWithLong:[iItem.itemCount longValue]+[jItem.itemCount longValue]];
                    // 移除累计元素
                    [result removeObjectAtIndex:j];
                } else {
                    j++;
                }
            }
        }
    }
    return result;
}

-(void)parseBriedData:(BattleBrief*)inBrief; {
    if (nil!=inBrief) {
        // 解析数据从inBrief包内
        self.seconds        = [[NSNumber numberWithInteger:[inBrief time]] unsignedIntValue];
        self.battleCount    = [[NSNumber numberWithInteger:[inBrief cnt]] unsignedIntValue];
        self.battleWins     = [[NSNumber numberWithInteger:[inBrief win]] unsignedIntValue];
        self.battleLost     = [[NSNumber numberWithInteger:[inBrief lost]] unsignedIntValue];
        self.battleMine     = [[NSNumber numberWithInteger:[inBrief mine]] unsignedIntValue];
        self.exp            = [[NSNumber numberWithInteger:[inBrief exp]] unsignedIntValue];
        self.money          = [[NSNumber numberWithInteger:[inBrief money]] unsignedIntValue];
        self.items          = [inBrief items];
        self.equips         = [inBrief equips];
        self.boxs           = [inBrief boxs];
        self.autoSells      = [inBrief autoSells];
    } else {
        // 填充测试数据,测试用
        self.seconds        = 3601;
        self.battleCount    = 20;
        self.battleWins     = 16;
        self.battleLost     = 4;
        self.battleMine     = 3;
        self.exp            = 2060;
        self.money          = 14000;
        self.items          = self.theItems;
        self.equips         = self.theEquips;
        self.boxs           = nil;
        self.autoSells      = self.theAutoSells;
    }
  
    // 输出log,测试用 +
    if ([self.items count]>0) {
        NSEnumerator *enumerator = [self.items objectEnumerator];
        id obj;
        NSLog(@"self.item count=%lu\n", [self.items count]) ;
        while(obj=[enumerator nextObject]) {
            NSLog(@"%@\n", obj) ;
        }
    }

    if ([self.equips count]>0) {
        NSEnumerator *enumerator = [self.equips objectEnumerator];
        id obj;
        NSLog(@"self.equips count=%lu\n", [self.equips count]) ;
        while(obj=[enumerator nextObject]) {
            NSLog(@"%@\n", obj) ;
        }
    }

    if ([self.boxs count]>0) {
        NSEnumerator *enumerator = [self.boxs objectEnumerator];
        id obj;
        NSLog(@"self.boxs count=%lu\n", [self.boxs count]) ;
        while(obj=[enumerator nextObject]) {
            NSLog(@"%@\n", obj) ;
        }
    }

    if ([self.autoSells count]>0) {
        NSEnumerator *enumerator = [self.autoSells objectEnumerator];
        id obj;
        NSLog(@"self.autoSells count=%lu\n", [self.autoSells count]) ;
        while(obj=[enumerator nextObject]) {
            NSLog(@"%@\n", obj) ;
        }
    }
    
    // 输出log,测试用 -
   

    // 更新简报标题,此处可能还需要细调
    [self.theBriefCircleLabel drawText:@"MINING RESULT"];
    
    
    // 更新brieftitleTableViewCell
    {
        NSString* time = [self setTimeWithInt];
        
        NSString* layerString = [NSString stringWithFormat:@"You minging in rock layer."];
        NSString* moneyString = [NSString stringWithFormat:@"%d", self.money];
        NSString* experiencesString = [NSString stringWithFormat:@"%d", self.exp];
        
        NSArray* data = [[NSArray alloc] initWithObjects:time, layerString, moneyString, experiencesString, nil];
        
        BriefTitleTableViewCell *briefTitleTableViewCell = [self.briefCellsArr objectAtIndex:0];
        [briefTitleTableViewCell setDataWithObject:data];
    }
    // 更新briefPropsTableViewCell
    {
        NSMutableArray *allItems = [[NSMutableArray alloc] initWithArray:self.items];
        [allItems addObjectsFromArray:self.equips];
        [allItems addObjectsFromArray:self.boxs];
        BriefPropsTableViewCell *briefPropsTableViewCell = [self.briefCellsArr objectAtIndex:1];
        [briefPropsTableViewCell setDataWithItems:self.items
                                           equips:self.equips
                                             boxs:self.boxs
                                        autoSells:self.autoSells];
    }
    // 更新briefTextTableViewCell
    {
        BriefTextTableViewCell* briefTextTableViewCell=[[self briefCellsArr] objectAtIndex:2];
        NSString* time = [self setTimeWithInt];
        NSString* battleResult = [self setBattleResultWithInt];
        NSString* rewards = [self setRewardWithInt];
        NSString* resultString = [NSString stringWithFormat:@"%@%@%@", time, battleResult, rewards];
        [briefTextTableViewCell setTextInfo:resultString];
    }
    
    //此处需要触briefViewController刷新
    [self setViewControllerData];
    [self.contentView reloadData];
    
}


-(void)setDataInfoInViewControllers:(NSDictionary*)data inParentView:(UIView*)inParentView;
{
    if (FALSE==self.isShowing) {
        self.isShowing = TRUE;
        // 保存父窗口view
        self.parentView = inParentView;
        // 设置父窗口alpha为0.6f
        if (nil!=self.parentView) {
            self.parentView.alpha = 0.6f;
            [self setTransParentImage];
        }
    
        
        if ([data objectForKey:@"Brief"])
        {
            [self parseBriedData:[data objectForKey:@"Brief"]];
        }
        // 测试数据
        else
        {
            [self parseBriedData:nil];
        }
    } else {
        // 数据先缓存到briefDataQueue队列里
        if ([data objectForKey:@"Brief"]) {
            [self.briefDataQueue addObject:data] ;
        }
    }
    // 测试用，显示现在缓冲数量
    [self.getAllButton setTitle:([self.briefDataQueue count]>0)?
        [NSString stringWithFormat:@"Get All(%lu)",[self.briefDataQueue count]]:
        @"Get All"
        forState:UIControlStateNormal];
}

-(void)resetViewControllerData
{
    self.seconds = 0;
    self.battleCount = 0;
    self.battleWins = 0;
    self.battleLost = 0;
    self.battleMine = 0;
    self.exp = 0;
    self.money = 0;
    self.equips  = nil;
    self.items = nil;
    self.boxs = nil;
    self.autoSells = nil;
}

-(void)setViewControllerData
{
//    NSString* time = [self setTimeWithInt];
//    NSString* battleResult = [self setBattleResultWithInt];
//    NSString* rewards = [self setRewardWithInt];
    
//    NSString* resultString = [NSString stringWithFormat:@"%@%@%@", time, battleResult, rewards];

   
    //    self.showTimer = [NSTimer scheduledTimerWithTimeInterval:Show_Time target:self selector:@selector(handleTimer:) userInfo:nil repeats:NO];
}

-(void)handleTimer:(NSTimer*)timer
{
    [self.showTimer invalidate];
    self.showTimer = nil;
    [self onGetAllClicked:nil];
}

-(NSString*)setTimeWithInt
{
    int seconds = 0;
    int minutes = 0;
    int hours = 0;
    int days = 0;
    
    if ([self seconds] >= 60)
    {
        seconds = self.seconds % 60;
        minutes = self.seconds / 60;
        if (minutes >= 60)
        {
            hours = minutes / 60;
            minutes = minutes % 60;
            if (hours >= 24)
            {
                days = hours / 24;
                hours = hours % 24;
            }
        }
    }
    
    NSString* daysString = @"";
    if (days != 0)
    {
        daysString = [NSString stringWithFormat:@" %d days ", days];
    }
    NSString* hoursString = @"";
    if (hours != 0)
    {
        hoursString = [NSString stringWithFormat:@" %d hours ", hours];
    }
    NSString* minutesString = @"";
    if (minutes != 0)
    {
        minutesString = [NSString stringWithFormat:@" %d minutes ", minutes];
    }
    NSString* secondsString = @"";
    if (seconds != 0)
    {
        secondsString = [NSString stringWithFormat:@" %d seconds", seconds];
    }
    
    return [NSString stringWithFormat:@"In the last%@%@%@%@.\n", daysString, hoursString, minutesString,secondsString];
}
-(NSString*)setBattleResultWithInt
{
    NSString* countString = @"";
    if ([self battleCount] > 0)
    {
        countString = [NSString stringWithFormat:@"Battle Count : %d\n", self.battleCount];
    }
    NSString* winString = @"";
    if ([self battleWins] > 0)
    {
        winString = [NSString stringWithFormat:@"Win Count : %d\n", self.battleWins];
    }
    NSString* lostString = @"";
    if ([self battleLost] > 0)
    {
        lostString = [NSString stringWithFormat:@"Lost Count : %d\n", self.battleLost];
    }
    NSString* mineString = @"";
    if ([self battleMine] > 0)
    {
        mineString = [NSString stringWithFormat:@"Battle Count : %d\n", self.battleMine];
    }
    
    return [NSString stringWithFormat:@"%@%@%@%@", countString,winString,lostString,mineString];
}
-(NSString*)setRewardWithInt
{
    NSString* expString = @"";
    if ([self exp] > 0)
    {
        expString = [NSString stringWithFormat:@"Gain Experience : %d\n", self.exp];
    }
    
    NSString* moneyString = @"";
    if ([self money] > 0)
    {
        moneyString = [NSString stringWithFormat:@"Gain Money : %d\n", self.money];
    }
    
    return [NSString stringWithFormat:@"%@%@",expString, moneyString];
}

#pragma mark - button events
- (IBAction)onGetAllClicked:(id)sender
{
    // 判断birefViewController是否在呈现中
    if (TRUE==self.isShowing) {
        // 判读briefDataQueue是否有需要跟新的数据,若为空则需要退出briefViewController.
        if ([self.briefDataQueue count]<=0) {
            [self resetViewControllerData];
            [self dismissViewControllerAnimated:NO completion:^{}];
            self.isShowing = FALSE ;
            // 设置父窗口alpha为1.0
            if (nil!=self.parentView) {
                self.parentView.alpha = 1.0f ;
                self.parentView = nil ;
            }
        } else {
            // briefDataQueue不为空,取索引0数据到data.
            id data = [self.briefDataQueue objectAtIndex:0] ;
            // 移除索引0数据
            [self.briefDataQueue removeObjectAtIndex:0] ;
            // 呈现给玩家新数据
            if ([data objectForKey:@"Brief"])
            {
                [self parseBriedData:[data objectForKey:@"Brief"]];
            }
        }
    }
    // 测试用，显示现在缓冲数量
    [self.getAllButton setTitle:([self.briefDataQueue count]>0)?
     [NSString stringWithFormat:@"Get All(%lu)",[self.briefDataQueue count]]:
     @"Get All"
                       forState:UIControlStateNormal];

}

#pragma mark - UITableViewDelegate
- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    //此处先做简单计算处理
    NSUInteger row = [indexPath row];
    CGFloat height=90.0;
    if (0==row) {
        BriefTitleTableViewCell* cell=[[self briefCellsArr] objectAtIndex:0];
        CGRect rect = [cell frame] ;
        height = rect.size.height ;
    } else if (1==row) {
        //此处需要动态调整props个数，调整view大小
        BriefPropsTableViewCell* cell=[[self briefCellsArr] objectAtIndex:1];
        CGRect rect = [cell frame] ;
        height = rect.size.height ;
    } else if (2==row) {
        //此处需要计算输出文本高度，调整view大小
        BriefTextTableViewCell* cell=[[self briefCellsArr] objectAtIndex:2];
        CGRect rect = [cell frame] ;
        height = rect.size.height ;
    }
    return ceilf(height) ;
}


#pragma mark - table view

- (void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath*)indexPath {
    // 计算当前brif所有viewCell的高度
    CGRect rect;
    CGFloat height = 0 ;
    for (int i=0; i<[self.briefCellsArr count]; i++) {
        rect = [[self.briefCellsArr objectAtIndex:i] frame];
        height = height+rect.size.height;
    }
    
    rect = [self.contentView frame];
    NSLog(@"%f %f\n", height, rect.size.height) ;
    
    // 判断是不是要设置滚动
    [self.contentView setScrollEnabled:(height<=rect.size.height)?FALSE:TRUE] ;
}

-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return [[self briefCellsArr] count];
}

-(UITableViewCell*)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    NSInteger row = [indexPath row];
    
    if (0==row) {   //输出briefTitle内容
        BriefTitleTableViewCell* cell=[[self briefCellsArr] objectAtIndex:0];
        return cell ;
    } else if (1==row) {    //输出briefProps内容
        BriefPropsTableViewCell* cell=[[self briefCellsArr] objectAtIndex:1];
        return cell ;
    } else if (2==row) {    //输出brief文本信息
        BriefTextTableViewCell* cell=[[self briefCellsArr] objectAtIndex:2];
        return cell ;
    }
    
    return nil;
    
}

@end

//
//  EquipSelectViewController.m
//  Miner
//
//  Created by zhihua.qian on 15-1-4.
//  Copyright (c) 2015年 jim kaden. All rights reserved.
//

#import "EquipSelectViewController.h"
#import "EquipSelectTableViewCell.h"
#import "GameObject.h"
#import "Bag.h"
#import "GameUI.h"
#import "Equipment.h"
#import "GameUtility.h"
#import "UtilityDef.h"

@interface EquipSelectViewController ()

@property (strong, nonatomic) NSMutableArray* tableVIewCells;
@property (nonatomic, strong) NSMutableArray *equipIdList;  // 装备id数组

@property (nonatomic, strong) Equipment* willUpgradeMainAttriEquip;
@end

@implementation EquipSelectViewController
-(id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    self.modalPresentationStyle = UIModalPresentationOverFullScreen;
    return self;
}
- (void)viewDidLoad {
    [super viewDidLoad];
    //self.view.backgroundColor = [UIColor clearColor];
    //self.modalPresentationStyle = UIModalPresentationOverFullScreen;
    // Do any additional setup after loading the view from its nib.
    self.tableVIewCells = [[NSMutableArray alloc] init];
    self.equipIdList = [[NSMutableArray alloc] init];
    self.equipsInBag = [[[GameObject sharedInstance] bag] bagEquips];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

-(void)viewDidAppear:(BOOL)animated
{
    //self.view.backgroundColor = [UIColor clearColor];
}

/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/
-(void)resetEquipSelectAllData
{
    [[self tableVIewCells] removeAllObjects];
    [[self equipIdList] removeAllObjects];
    [self setEquipsInBag:[[[GameObject sharedInstance] bag] bagEquips]];
    costMoney = 0;
    addExp = 0;
    
    
    NSMutableDictionary* tempDict = [[NSMutableDictionary alloc]init];
    SortParam* param1 = [[SortParam alloc]init];
    param1.paramName = @"equipStar";
    param1.ascending = NO;
    [tempDict setObject:param1 forKey:@"0"];
    SortParam* param2 = [[SortParam alloc]init];
    param2.paramName = @"equipTId";
    param2.ascending = NO;
    [tempDict setObject:param2 forKey:@"1"];
    SortParam* param3 = [[SortParam alloc]init];
    param3.paramName = @"equipBV";
    param3.ascending = NO;
    [tempDict setObject:param3 forKey:@"2"];
    self.equipsInBag = [GameUtility array:[self equipsInBag] sortArrayWithParams:tempDict];
}

-(void)setDataForSelectViewControllers:(NSDictionary*)data
{
    [self resetEquipSelectAllData];
    
    if ([data objectForKey:@"PetId"])
    {
        self.petId = [data objectForKey:@"PetId"];
    }
    else
    {
        self.petId = DefaultValue;
    }
    
    if ([data objectForKey:@"WillUpEquipId"])
    {
        self.willUpgradeMainAttriEquip = [[GameObject sharedInstance] getEquipWithIdentifier:[data objectForKey:@"WillUpEquipId"]];
        if (self.willUpgradeMainAttriEquip == nil)
        {
            [[GameUI sharedInstance] showError:@"没有找到部件上的装备" title:@"error"];
            return;
        }
        else
        {
            NSMutableArray* tempArr = [NSMutableArray arrayWithArray:self.equipsInBag];
            [tempArr removeObject:[self willUpgradeMainAttriEquip]];
            self.equipsInBag = tempArr;
            
            self.currentLevelLabel.text = [[[[self willUpgradeMainAttriEquip] mainAttri] attriLv] stringValue];
            self.willChangeLevelLabel.text = self.currentLevelLabel.text;
            [self.selectTabelView reloadData];
            
            NSIndexPath* indexPath = [NSIndexPath indexPathForRow:0 inSection:0];
            [self.selectTabelView scrollToRowAtIndexPath:indexPath
                                        atScrollPosition:UITableViewScrollPositionBottom
                                                animated:NO];
        }
    }
}

#pragma mark - table view 
-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    if ([tableView tag] == 12)
    {
        return [self.equipsInBag count];
    }
    return 0;
}
-(UITableViewCell*)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    NSInteger row = [indexPath row];
    EquipSelectTableViewCell* cell;
    if (row < [self.tableVIewCells count])
    {
        cell = [self.tableVIewCells objectAtIndex:row];
    }
    else
    {
        NSArray* nibs = [[NSBundle mainBundle] loadNibNamed:@"EquipSelectTableViewCell" owner:self options:nil];
        cell = (EquipSelectTableViewCell*)[nibs objectAtIndex:0];
        
        NSMutableArray *tempArr = [[NSMutableArray alloc]init];
        [tempArr addObject:[self.equipsInBag objectAtIndex:row]];
        
        [cell setDataWithObject:tempArr];
        
        [self.tableVIewCells addObject:cell];
    }
    return cell;
}

#pragma mark - buttons event
- (IBAction)onCloseClicked:(id)sender
{
    [self dismissViewControllerAnimated:NO completion:^{[self clearAllControllers];}];
}

- (IBAction)onSequenceBtnClicked:(id)sender
{
}
- (IBAction)onOKBtnClicked:(id)sender
{
    [[GameUI sharedInstance] EquipSelectToEquipMain:self.equipIdList];
    [self dismissViewControllerAnimated:NO completion:^{[self clearAllControllers];}];
}

#pragma mark - privated functions
-(void)clearAllControllers
{
    [self.tableVIewCells removeAllObjects];
    self.equipsInBag = nil;
    self.petId = nil;
    [EquipSelectTableViewCell resetSelectCount];
}

#pragma mark - public functions
//
// 消息事件来自 cell （CommonTableViewCell01 类）
// 添加物品到队列（是cell选中的物品）
//
-(void)addObjectToList:(NSDictionary*)params
{
    if ([params objectForKey:@"EquipId"])
    {
        [self.equipIdList addObject:[params objectForKey:@"EquipId"]];
        Equipment* equip = [[GameObject sharedInstance] getEquipWithIdentifier:[params objectForKey:@"EquipId"]];
        [self addCostMoneyByEquip:equip optionState:YES];
        [self changeTotalExp:equip optionState:YES];
        [self updateBottomFrameForData];
    }
}

//
// 消息事件来自 cell （CommonTableViewCell01 类）
// 移除物品从队列（是cell选择的物品）
//
-(void)substractObjectToList:(NSDictionary*)params
{
    if ([params objectForKey:@"EquipId"])
    {
        [self.equipIdList removeObject:[params objectForKey:@"EquipId"]];
        Equipment* equip = [[GameObject sharedInstance] getEquipWithIdentifier:[params objectForKey:@"EquipId"]];
        [self addCostMoneyByEquip:equip optionState:NO];
        [self changeTotalExp:equip optionState:NO];
        [self updateBottomFrameForData];
    }
}

-(void)addCostMoneyByEquip:(Equipment*)equip optionState:(BOOL)isAdd
{
    if (isAdd)
    {
        costMoney += equip.mainAttri.cost;
    }
    else
    {
        costMoney -= equip.mainAttri.cost;
    }
}
-(void)changeTotalExp:(Equipment*)equip optionState:(BOOL)isAdd
{
    if (isAdd)
    {
        addExp += ([equip.mainAttri.attriBaseExp integerValue] + [equip.mainAttri.attriTotalExp integerValue]* equip.mainAttri.ratio);
    }
    else
    {
        addExp -= ([equip.mainAttri.attriBaseExp integerValue] + [equip.mainAttri.attriTotalExp integerValue]* equip.mainAttri.ratio);
    }
}
-(void)updateBottomFrameForData
{
    self.needCostMoneyLabel.text = [NSString stringWithFormat:@"%d", costMoney];
    
    float fCurExp = [self.willUpgradeMainAttriEquip.mainAttri.attriCurExp floatValue];
    float fMaxExp = [self.willUpgradeMainAttriEquip.mainAttri.attriMaxExp floatValue];
    
    if (fCurExp + addExp >= fMaxExp)
    {
        [self scaleUpgradeToLevel:(fCurExp + addExp)];
    }
    else
    {
        self.willChangeLevelLabel.text = self.currentLevelLabel.text;
    }
}

-(void)scaleUpgradeToLevel:(float)totalExp
{
    int equipMainAttriLevel = [[[[self willUpgradeMainAttriEquip] mainAttri] attriLv] intValue];
    NSNumber* star = [[self willUpgradeMainAttriEquip] equipStar];
    float leftExp = totalExp - [self.willUpgradeMainAttriEquip.mainAttri.attriMaxExp floatValue];
    int i=0;
    BOOL loopScale = YES;
    while (loopScale)
    {
        i++;
        NSNumber* level = [NSNumber numberWithInt:equipMainAttriLevel+i];
        NSNumber* nextLevelExp = [[MainAttriLvConfig share] getLevelMaxExpWithLv:level starNum:star];
        
        if (leftExp <= [nextLevelExp floatValue])
        {
            loopScale = NO;
        }
        else
        {
            leftExp -= [nextLevelExp floatValue];
        }
    }
    
    int lastLevel = equipMainAttriLevel + i;
    self.willChangeLevelLabel.text = [NSString stringWithFormat:@"%d", lastLevel];
}
@end

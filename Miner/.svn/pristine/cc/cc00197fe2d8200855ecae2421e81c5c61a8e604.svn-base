//
//  Hero.m
//  testMiner
//
//  Created by zhihua.qian on 14-12-3.
//  Copyright (c) 2014年 tonyguan. All rights reserved.
//

#import "Hero.h"
#import "BaseAttribute.h"
#import "PortConfig.h"
#import "Equipment.h"
#import "Skill.h"
#import "Pet.h"
#import "Haypi/Haypi.h"

#import "GameUtility.h"
#import "UtilityDef.h"

@implementation Hero
#pragma mark - 人物属性的设置和重置
-(void)setDataWithDictionary:(NSDictionary *)data
{
    self.heroName       = getLastUser();
    
    self.heroLevel      = [data objectForKey:@"Level"];
    [self setBaseAttriValues:self.heroLevel];
    
    self.heroZone       = [data objectForKey:@"Zone"];
    self.heroIcon       = [data objectForKey:@"Icon"];
    self.heroCurrentExp = [data objectForKey:@"Exp"];
    self.heroLevelData  = [[HeroConfig share] getHeroLevelDataWithLevel:self.heroLevel];
    self.heroMaxExp     = [[NSNumber alloc] initWithInteger:[self.heroLevelData heroExp]];
    self.heroMap        = [data objectForKey:@"Map"];
    self.heroTopMap     = [data objectForKey:@"TopMap"];
    self.heroCoin       = [data objectForKey:@"Coin"];
    self.heroMoney      = [data objectForKey:@"Money"];
    self.heroEther      = [data objectForKey:@"ETher"];
    self.heroCntrb      = [data objectForKey:@"Cntrb"];
    self.heroCLevel     = [data objectForKey:@"CLevel"];
    self.heroPrestige   = [data objectForKey:@"Prestige"];
    self.heroBv         = [data objectForKey:@"BV"];
    self.heroRkldr      = [data objectForKey:@"RkLdr"];
    self.heroLdr        = [data objectForKey:@"Ldr"];
    self.heroQck        = [data objectForKey:@"Qck"];
    self.heroBoss       = [data objectForKey:@"Boss"];
    
    self.heroVipLevel   = DefaultValue;
    
    if ([data objectForKey:@"Equip"])
    {
        NSArray *equipData = [data objectForKey:@"Equip"];
        [self setHeroEquipsWithArray:equipData];
    }
    
    if ([data objectForKey:@"Skill"])
    {
        NSArray *skillData = [data objectForKey:@"Skill"];
        [self setHeroSkillsDataWithArray:skillData];
    }
    
    if ([data objectForKey:@"Buff"])
    {
        // todo
    }
    
    if ([data objectForKey:@"Pet"])
    {
        NSArray *petData = [data objectForKey:@"Pet"];
        [self setHeroPetWithArray:petData];
    }
}

// 应该算比较长的方法了，其实很简单
-(void)resetDataWithDictionary:(NSDictionary *)data
{
    if ([data objectForKey:@"Level"])
    {
        NSNumber *level = [data objectForKey:@"Level"];
        if (![level isEqualToNumber:self.heroLevel])
        {
            self.heroLevel = level;
            [self setBaseAttriValues:self.heroLevel];
            self.heroMaxExp = [[NSNumber alloc] initWithInteger:[self.heroLevelData heroExp]];
        }
    }
    
    if ([data objectForKey:@"Zone"])
    {
        NSNumber *zone = [data objectForKey:@"Zone"];
        if (![zone isEqualToNumber:self.heroZone])
        {
            self.heroZone = zone;
        }
    }
    
    if ([data objectForKey:@"Icon"])
    {
        NSNumber *icon = [data objectForKey:@"Icon"];
        if (![icon isEqualToNumber:self.heroIcon])
        {
            self.heroCoin = icon;
        }
    }
    
    if ([data objectForKey:@"Exp"])
    {
        NSNumber *exp = [data objectForKey:@"Exp"];
        if ([exp integerValue] > 0)
        {
            self.heroCurrentExp = exp;    // 金大大说穿过来的就是当前的经验
        }
    }
    
    if ([data objectForKey:@"Map"])
    {
        NSNumber *map = [data objectForKey:@"Map"];
        if (![map isEqualToNumber:self.heroMap])
        {
            self.heroMap = map;
        }
    }
    
    if ([data objectForKey:@"TopMap"])
    {
        NSNumber *topmap = [data objectForKey:@"TopMap"];
        if (![topmap isEqualToNumber:self.heroTopMap])
        {
            self.heroTopMap = topmap;
        }
    }
    
    if ([data objectForKey:@"Coin"])
    {
        NSNumber *coin = [data objectForKey:@"Coin"];
        if (![coin isEqualToNumber:self.heroCoin])
        {
            self.heroCoin = coin;
        }
    }
    
    if ([data objectForKey:@"Money"])
    {
        NSNumber *money = [data objectForKey:@"Money"];
        if (![money isEqualToNumber:self.heroMoney])
        {
            self.heroMoney = money;
        }
    }
    
    if ([data objectForKey:@"Eter"])
    {
        NSNumber *eter = [data objectForKey:@"Eter"];
        if (![eter isEqualToNumber:self.heroEther])
        {
            self.heroEther = eter;
        }
    }
    
    if ([data objectForKey:@"Cntrb"])
    {
        NSNumber *cntrb = [data objectForKey:@"Cntrb"];
        if (![cntrb isEqualToNumber:self.heroCntrb])
        {
            self.heroCntrb = cntrb;
        }
    }
    
    if ([data objectForKey:@"CLevel"])
    {
        NSNumber *clevel = [data objectForKey:@"CLevel"];
        if (![clevel isEqualToNumber:self.heroCLevel])
        {
            self.heroCLevel = clevel;
        }
    }
    
    if ([data objectForKey:@"Prestige"])
    {
        NSNumber *prestige = [data objectForKey:@"Prestige"];
        if ([prestige integerValue]> 0)
        {
            self.heroPrestige = prestige; // 金大大说穿过来的就是当前的声望
        }
    }
    
    if ([data objectForKey:@"BV"])
    {
        NSNumber *bv = [data objectForKey:@"BV"];
        if (![bv isEqualToNumber:self.heroBv])
        {
            self.heroBv = bv;
        }
    }
    
    if ([data objectForKey:@"Ldr"])
    {
        NSNumber *ldr = [data objectForKey:@"Ldr"];
        if (![ldr isEqualToNumber:self.heroLdr])
        {
            self.heroLdr = ldr;
        }
    }
    
    if ([data objectForKey:@"Qck"])
    {
        NSNumber *qck = [data objectForKey:@"Qck"];
        if (![qck isEqualToNumber:self.heroQck])
        {
            self.heroQck = qck;
        }
    }
    
    if ([data objectForKey:@"Boss"])
    {
        NSNumber *boss = [data objectForKey:@"Boss"];
        if (![boss isEqualToNumber:self.heroBoss])
        {
            self.heroBoss = boss;
        }
    }
}

-(void)setInviteCodeWithObject:(NSString*)code
{
    self.inviteCode = code;
}

-(void)changeEquipWithDictionary:(NSDictionary *)data isHero:(BOOL)sure
{
    if (sure)
    {
        NSNumber *id = [data objectForKey:@"EID"];
        for (Equipment *equip in self.heroEquitsArray)
        {
            if ([[equip equipEId] isEqualToNumber:id])
            {
                [equip setEquipDataWithDictionary:data];
            }
        }
    }
    else
    {
        NSNumber *petId = [data objectForKey:@"HID"];
        for (Pet *pet in self.heroPetArray)
        {
            if ([pet.petId isEqualToNumber:petId])
            {
                [pet changeEquipWithDictionary:data];
            }
        }
    }
}

#pragma mark - 与 宠物 有关的方法
-(Pet *)getPetWithIdentifier:(NSNumber *)petId
{
    for (Pet *pet in self.heroPetArray)
    {
        if ([pet.petId isEqualToNumber:petId])
        {
            return pet;
        }
    }
    return nil;
}
-(Pet *)getPetWithType:(NSNumber *)type
{
    for (Pet* pet in self.heroPetArray)
    {
        if (pet.petDef.petID == [type integerValue])
        {
            return pet;
        }
    }
    return nil;
}

#pragma mark - 与 装备 有关的方法
-(Equipment *)getEquipmentWithIdentifier:(NSNumber *)equipId
{
    for (Equipment *equip in self.heroEquitsArray)
    {
        if ([[equip equipEId] isEqualToNumber:equipId])
        {
            return equip;
        }
    }
    
    for (Pet *pet in self.heroPetArray)
    {
        Equipment *equip = [pet getEquipmentWithIdentifier:equipId];
        if (equip)
        {
            return equip;
        }
    }
    
    return nil;
}

-(Equipment *)getEquipmentWithSlot:(NSNumber*)slot withPetId:(NSNumber*)petId
{
    if ([petId isEqualToNumber:DefaultValue])
    {
        for (Equipment *equip in self.heroEquitsArray)
        {
            if ([equip.equipSlot isEqualToNumber:slot])
            {
                return equip;
            }
        }
    }
    else
    {
        for (Pet* pet in [self heroPetArray])
        {
            if ([[pet petId] isEqualToNumber:petId])
            {
                for (Equipment *equip in [pet petEquitsArray])
                {
                    if ([equip.equipSlot isEqualToNumber:slot])
                    {
                        return equip;
                    }
                }
            }
        }
    }
    return nil;
}

-(void)addEquipToPet:(Equipment *)equip withPetId:(NSNumber*)identifier
{
    Pet* pet = [self getPetWithIdentifier:identifier];
    if (pet == nil)
    {
        return;
    }
    [pet addEquip:equip];
}

-(void)removeEquipFromPet:(Equipment *)equip withPetId:(NSNumber*)identifier
{
    Pet* pet = [self getPetWithIdentifier:identifier];
    if (pet == nil)
    {
        return;
    }
    [pet removeEquip:equip];
}

-(void)addEquipToHero:(Equipment *)equip
{
    if ([[equip equipSlot] integerValue] == 0)
    {
        [equip changeEquipSlotFromDef];
    }
    
    NSMutableArray *tempArr = [[NSMutableArray alloc]initWithArray:self.heroEquitsArray];
    [tempArr addObject:equip];
    self.heroEquitsArray = [[NSArray alloc]initWithArray:tempArr];

    [self addBaseAttriValueByEquip:equip];
}
-(void)removeEquipFromHero:(Equipment *)equip
{
    NSMutableArray *tempArr = [[NSMutableArray alloc]initWithArray:self.heroEquitsArray];
    [tempArr removeObject:equip];
    self.heroEquitsArray = [[NSArray alloc]initWithArray:tempArr];
    
    [self reduceBaseAttriValueByEquip:equip];
}

#pragma mark - 获取需要计算的属性
-(float)getExpPercent
{
    float curExp = [self.heroCurrentExp floatValue];
    float maxExp = [self.heroMaxExp floatValue];
    return curExp/maxExp;
}

-(float)getCntrbPercent
{
    ContributionDef* conDef = [[ContributionConfig share] getContributionDefWithLevel:self.heroCLevel];
    
    // modified by jim
    // 判断除零错误
    if ( conDef == nil || conDef.conValue == 0 )
        return 0;
    
    NSNumber* conV = [[NSNumber alloc]initWithInteger:conDef.conValue];
    float curConV = [self.heroCntrb floatValue];
    float maxConV = [conV floatValue];
    return curConV/maxConV;
}

#pragma mark - 与 技能 有关的方法
-(void)addSkillWithId:(NSNumber*)skillId withLv:(NSNumber*)lv
{
    Skill* skill = [[Skill alloc]init];
    [skill setSkillDataWithNumberId:skillId withLevel:lv];
    
    NSMutableArray* tempArr = [[NSMutableArray alloc] initWithArray:[self heroSkillArray]];
    [tempArr addObject:skill];
    self.heroSkillArray = tempArr;
}
-(void)removeSkillWithId:(NSNumber*)skillId
{
    NSMutableArray* tempArr = [[NSMutableArray alloc] initWithArray:[self heroSkillArray]];
    for (Skill* skill in [self heroSkillArray])
    {
        if ([[skill skillTId] isEqualToNumber:skillId])
        {
            [tempArr removeObject:skill];
        }
    }
    self.heroSkillArray = [[NSArray alloc] initWithArray:tempArr];
}

#pragma mark - 与 钱币 有关的方法
-(void)addHeroMoney:(NSInteger)count
{
    NSInteger leftMoney = [self.heroMoney integerValue] + count;
    self.heroMoney = [NSNumber numberWithInteger:leftMoney];
}
-(void)reduceHeroMoney:(NSInteger)count
{
    NSInteger leftMoney = [self.heroMoney integerValue] - count;
    self.heroMoney = [NSNumber numberWithInteger:leftMoney];
}

#pragma mark - private function
-(void)setBaseAttriValues:(NSNumber*)level
{
    self.heroAttributes = [[BaseAttribute alloc]init];
    [[self heroAttributes] setHeroDataWithLevel:level];
}
-(void)addBaseAttriValueByEquip:(Equipment*)equip
{
    int type = [[[equip mainAttri] attriId] intValue];
    int value = [[[equip mainAttri] attriValue] intValue];
    [[self heroAttributes] scaleBaseAttriWithValueCode:type addValue:value];
    
    for (AttributeData* subAttri in [equip subAttri])
    {
        type = [[subAttri attriId] intValue];
        value = [[subAttri attriValue] intValue];
        [[self heroAttributes] scaleBaseAttriWithValueCode:type addValue:value];
    }
}
-(void)reduceBaseAttriValueByEquip:(Equipment*)equip
{
    int type = [[[equip mainAttri] attriId] intValue];
    int value = [[[equip mainAttri] attriValue] intValue];
    [[self heroAttributes] scaleBaseAttriWithValueCode:type addValue:-value];
    
    for (AttributeData* subAttri in [equip subAttri])
    {
        type = [[subAttri attriId] intValue];
        value = [[subAttri attriValue] intValue];
        [[self heroAttributes] scaleBaseAttriWithValueCode:type addValue:-value];
    }
}

-(void)setHeroSkillsDataWithArray:(NSArray *)data
{
    NSMutableArray *tempArray = [[NSMutableArray alloc]init];
    int count = (int)[data count];
    for (int i=0; i<count; i++)
    {
        Skill *skill = [[Skill alloc]init];
        NSNumber* tempid = [data objectAtIndex:i++];
        NSNumber* templv = [data objectAtIndex:i++];
        [skill setSkillDataWithNumberId:tempid withLevel:templv];
        [tempArray addObject:skill];
    }
    self.heroSkillArray = [[NSArray alloc]initWithArray:tempArray];
}

-(void)setHeroEquipsWithArray:(NSArray *)data
{
    for (NSDictionary *temp in data)
    {
        Equipment *equip = [[Equipment alloc]init];
        [equip setEquipDataWithDictionary:temp];
        [self addEquipToHero:equip];
        
        NSInteger baseBv = [self.heroBv integerValue];
        NSInteger equipBv = [equip.equipBV integerValue];
        self.heroBv = [NSNumber numberWithInteger:(baseBv+equipBv)];
    }
}

-(void)setHeroPetWithArray:(NSArray *)data
{
    NSMutableArray *tempPet = [[NSMutableArray alloc]init];
    for (int i=0; i<[data count]; i++)
    {
        Pet *pet = [[Pet alloc]init];
        [pet setPetDataWithDictionary:[data objectAtIndex:i]];
        [tempPet addObject:pet];
    }
    
    SortParam* param = [[SortParam alloc]init];
    param.paramName = @"petId";
    param.ascending = YES;
    NSDictionary* tempDict = [NSDictionary dictionaryWithObjectsAndKeys:param,@"0", nil];
    self.heroPetArray = [GameUtility array:tempPet sortArrayWithParams:tempDict];
}
@end

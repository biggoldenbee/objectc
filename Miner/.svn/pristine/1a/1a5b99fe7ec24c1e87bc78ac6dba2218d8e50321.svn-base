//
//  StoreViewController.m
//  Miner
//
//  Created by biggoldenbee on 15/1/19.
//  Copyright (c) 2015年 jim kaden. All rights reserved.
//

#import "StoreViewController.h"
#import "GameUI.h"

#import "StoreCollectionViewCell.h"
#import "PackageManager.h"

#define STORE_TYPE_0    0 // 普通
#define STORE_TYPE_1    1 // 黑市
#define STORE_TYPE_2    2 // 赌市


@implementation Store

-(NSArray *)setGoodsWithArray:(NSArray *)data
{
    if (data == nil || [data count] == 0)
        return nil;
    
    NSMutableArray *tempArr = [[NSMutableArray alloc]init];
    for (NSDictionary *tempDict in data)
    {
        Goods *goods = [[Goods alloc]init];
        [goods setDataWithDictionary:tempDict];
        [tempArr addObject:goods];
    }
    
    return tempArr;
}


-(void)setDataWithDictionary:(NSDictionary *)data{
    self.Luck = [[data objectForKey:@"Luck"] integerValue];
    self.Type = [[data objectForKey:@"Type"] integerValue];
    NSArray *goodsData = [data objectForKey:@"Goods"];
    self.Goods = [self setGoodsWithArray:goodsData];
}

@end


@interface StoreViewController ()
@property (nonatomic,assign) NSInteger theStoreType;
@property (nonatomic,strong) NSMutableArray *theStores;
@end

@implementation StoreViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view from its nib.
    self.theStoreType = STORE_TYPE_0;
    [self resetAllBtns];
    // 隐藏赌场 暂时不用
    [self.theGambleButton setHidden:TRUE];

    // 注册StoreCollectionViewCell类到self.storeCollectionView
    [self.storeCollectionView registerClass:[StoreCollectionViewCell class] forCellWithReuseIdentifier:@"StoreCollectionViewCell"];

    // 初始化商店
    self.theStores = [[NSMutableArray alloc] init];
    
    // 激活STORE TAB页面
    [self onStoreButtonClicked:[self theStoreButton]];
    // 获取所有数据
    [self onRefreshClicked:self.theRefreshButton];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

-(void)setDataInfoInViewControllers:(NSDictionary *)data {
    // 此函数响应refreshClicked，获取全部的商品列表
    if ([data objectForKey:@"Shop"])
    {
        // 清除所有的商店
        [[self theStores] removeAllObjects];
        // 获取原始商店包从server数据
        NSArray *storeData = [data objectForKey:@"Shop"];
        // 解析STORE
        for (int i=0;i<[[storeData objectAtIndex:0] count]; i++)
        {
            Store *aStore = [[Store alloc] init];
            [aStore setDataWithDictionary:[[storeData objectAtIndex:0] objectAtIndex:i]];
            NSLog(@"%ld\n", aStore.Luck);
            NSLog(@"%ld\n", aStore.Type);
            for (Goods *goods in aStore.Goods) {
                NSLog(@"%ld\n", [goods Type]);
                NSLog(@"%@\n", [goods Token]);
            }
            [self.theStores addObject:aStore];
        }
    }

    if ([data objectForKey:@"Hero"])
    {
        NSLog(@"%@\n", [data objectForKey:@"Hero"]);
    }
   
    [[self storeCollectionView] reloadData];
    
}

-(void)updateDataInfoInViewControllers:(NSDictionary *)data {
    // 此函数响应购买商品后，获取当前页面的商品列表
    if ([data objectForKey:@"Shop"])
    {
        // 获取原始商店包从server数据
        NSArray *storeData = [data objectForKey:@"Shop"];
        // 解析STORE
         Store *aStore = [[Store alloc] init];
        [aStore setDataWithDictionary:[[storeData objectAtIndex:0] objectAtIndex:0]];
        NSLog(@"%ld\n", aStore.Luck);
        NSLog(@"%ld\n", aStore.Type);
        for (Goods *goods in aStore.Goods) {
            NSLog(@"%ld\n", [goods Type]);
            NSLog(@"%@\n", [goods Token]);
        }
        // 替换当前页面商品，或增加该页面商品（如果该页面不存在）
        // 判读是不是购买当前页面
        if (self.theStoreType==aStore.Type){
            NSLog(@"%d\n", (int)self.theStoreType);
            if (self.theStoreType<[self.theStores count])
                [self.theStores removeObjectAtIndex:self.theStoreType];
            [self.theStores insertObject:aStore atIndex:self.theStoreType];
        }
    }
    [[self storeCollectionView] reloadData];
}

-(void)storeQueryGoods:(NSInteger)type{
    // type是-1将请求所有的商店物品
    NSMutableDictionary* tempDict = [[NSMutableDictionary alloc]init];
    [tempDict setObject:[NSNumber numberWithInt:(int)type] forKey:@"Type"];
    [[PackageManager sharedInstance] storeQueryGoods:tempDict];
}

-(void)resetAllBtns{
    [[self theStoreButton] setSelected:NO];
    [[self theMarketButton] setSelected:NO];
    [[self theGambleButton] setSelected:NO];
}

- (IBAction)onStoreButtonClicked:(id)sender {
    [self resetAllBtns];
    [[self theStoreButton] setSelected:YES];
    [[self storeCollectionView] reloadData];
    self.theStoreType = STORE_TYPE_0;
//    [self storeQueryGoods:self.theStoreType];
    [[self storeCollectionView] reloadData];
}

- (IBAction)onMarketButtonClicked:(id)sender {
    [self resetAllBtns];
    [[self theMarketButton] setSelected:YES];
    [[self storeCollectionView] reloadData];
    self.theStoreType = STORE_TYPE_1;
//    [self storeQueryGoods:self.theStoreType];
    [[self storeCollectionView] reloadData];
}

- (IBAction)onGambleClicked:(id)sender {
    [self resetAllBtns];
    [[self theGambleButton] setSelected:YES];
    [[self storeCollectionView] reloadData];
    self.theStoreType = STORE_TYPE_2;
//    [self storeQueryGoods:self.theStoreType];
    [[self storeCollectionView] reloadData];
}

- (IBAction)onCloseButtonClicked:(id)sender {
    [[GameUI sharedInstance] showMineView];
}


- (IBAction)onRefreshClicked:(id)sender {
    // 此处测试用
    [self storeQueryGoods:-1];
}


#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}


#pragma mark - Collection view datasource && delegate
-(NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView
{
    switch ([self theStoreType])
    {
        case STORE_TYPE_0:
            return 1;
            break;
        case STORE_TYPE_1:
            return 1;
            break;
        case STORE_TYPE_2:
            return 1;
            break;
        default:
            return 1;
            break;
    }
}

-(NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
    NSInteger count=0;
    if ((self.theStoreType<[self.theStores count]))
        count = [[[self.theStores objectAtIndex:self.theStoreType] Goods] count];
    return count;
}

-(UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
    if ([indexPath section] == 0) {
        if ((self.theStoreType<[self.theStores count])) {

            StoreCollectionViewCell *cell = (StoreCollectionViewCell *)[collectionView dequeueReusableCellWithReuseIdentifier:@"StoreCollectionViewCell" forIndexPath:indexPath];

            NSInteger row = [indexPath row];
            [cell setDataWithObject:[[[self.theStores objectAtIndex:self.theStoreType] Goods] objectAtIndex:row] storeType:[self theStoreType]];

            return cell;
        } else {
            return nil;
        }
    } else {
        return nil;
    }
}

-(void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
    
    NSLog(@"didSelectItemAtIndexPath\n");
}

@end
